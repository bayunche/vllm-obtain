# VLLM 跨平台推理服务 - Windows 专用配置
# 优化 NVIDIA GPU (CUDA) / CPU 性能

# =============================================================================
# 服务基础配置
# =============================================================================
HOST=127.0.0.1
PORT=8001
DEBUG=false
WORKERS=2  # Windows建议较少worker数量

# =============================================================================
# 推理引擎配置 - Windows专用
# =============================================================================
INFERENCE_ENGINE=llamacpp  # Windows主要使用llama.cpp引擎
DEVICE_TYPE=cuda          # cuda 或 cpu
DEFAULT_MODEL=qwen-0.5b
MAX_CONCURRENT_MODELS=1

# llama.cpp 特定配置
LLAMACPP_N_THREADS=8      # CPU线程数 (建议为物理核心数)
LLAMACPP_N_GPU_LAYERS=32  # GPU层数 (仅CUDA)
LLAMACPP_BATCH_SIZE=512
LLAMACPP_CONTEXT_SIZE=4096

# Windows CUDA 配置
CUDA_VISIBLE_DEVICES=0
CUDA_PATH=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1

# =============================================================================
# 模型和缓存配置
# =============================================================================
MODEL_DIR=.\\models        # Windows路径分隔符
CACHE_DIR=.\\cache
ENABLE_CACHING=true
CACHE_SIZE=2000            # Windows内存通常较小
CACHE_TTL=3600

# =============================================================================
# 并发和性能配置
# =============================================================================
MAX_CONCURRENT_REQUESTS=20  # Windows适中并发
REQUEST_TIMEOUT=180
WORKER_CLASS=sync           # Windows推荐sync模式
WORKER_CONNECTIONS=200
KEEP_ALIVE=2

# Windows 特定WSGI配置
USE_WAITRESS=true           # Windows推荐Waitress服务器
WAITRESS_THREADS=4
WAITRESS_CONNECTION_LIMIT=100

# =============================================================================
# 内存管理
# =============================================================================
MEMORY_LIMIT=75             # Windows预留更多内存给系统
ENABLE_SWAP_PROTECTION=true # Windows swap性能较差
AUTO_CLEANUP_INTERVAL=1800

# =============================================================================
# 日志配置
# =============================================================================
LOG_LEVEL=INFO
LOG_DIR=.\\logs            # Windows路径
ENABLE_LOG_FILE=true
LOG_RETENTION_DAYS=14
LOG_ROTATE_SIZE=200MB
ENABLE_WINDOWS_EVENT_LOG=false  # 可选择写入Windows事件日志

# =============================================================================
# 安全配置
# =============================================================================
ALLOWED_HOSTS=127.0.0.1,localhost
CORS_ORIGINS=http://localhost:3000
API_KEY_REQUIRED=false
# Windows防火墙配置
ENABLE_WINDOWS_FIREWALL_RULE=false

# =============================================================================
# 监控配置
# =============================================================================
ENABLE_METRICS=true
METRICS_INTERVAL=120        # Windows监控频率较低
HEALTH_CHECK_TIMEOUT=15

# =============================================================================
# Windows 特定优化
# =============================================================================
# 系统优化
USE_WINDOWS_PERFORMANCE_TOOLKIT=false
ENABLE_PROCESS_PRIORITY=false      # 提升进程优先级
PROCESS_PRIORITY=NORMAL           # IDLE, BELOW_NORMAL, NORMAL, ABOVE_NORMAL, HIGH

# 内存优化
ENABLE_LARGE_PAGES=false          # 需要管理员权限
USE_SYSTEM_MEMORY_ALLOCATOR=true

# 文件系统优化
DISABLE_WINDOWS_DEFENDER_REALTIME=false  # 建议手动操作
USE_SSD_OPTIMIZATION=true
ENABLE_PREFETCH=true

# =============================================================================
# GPU特定配置 (Windows CUDA)
# =============================================================================
# NVIDIA GPU设置
CUDA_LAUNCH_BLOCKING=0
CUDA_CACHE_DISABLE=0
CUDA_FORCE_PTX_JIT=0

# DirectML 配置 (可选，用于更广泛的GPU支持)
ENABLE_DIRECTML=false
DIRECTML_DEVICE_ID=0

# =============================================================================
# 开发者配置
# =============================================================================
FLASK_ENV=production
PYTHONPATH=.
# Windows时区设置
TZ=UTC

# PowerShell执行策略 (需要管理员设置)
# Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

# =============================================================================
# 服务管理配置
# =============================================================================
# Windows服务配置
INSTALL_AS_WINDOWS_SERVICE=false
SERVICE_NAME=VLLMInferenceService
SERVICE_DISPLAY_NAME=VLLM Inference Service
SERVICE_DESCRIPTION=Cross-platform VLLM inference service

# 服务启动配置
SERVICE_START_TYPE=automatic    # manual, automatic, disabled
SERVICE_ACCOUNT=LocalSystem     # 或指定用户账户

# =============================================================================
# 网络配置
# =============================================================================
# Windows网络优化
ENABLE_WINSOCK_OPTIMIZATION=true
TCP_CHIMNEY_OFFLOAD=true
RECEIVE_SIDE_SCALING=true

# =============================================================================
# 兼容性设置
# =============================================================================
# Python版本兼容
PYTHON_VERSION_CHECK=true
MIN_PYTHON_VERSION=3.8.0

# Windows版本兼容
MIN_WINDOWS_VERSION=10.0.19041  # Windows 10 版本2004

# Visual C++ 运行时
REQUIRE_VCREDIST=true
VCREDIST_MIN_VERSION=14.0

# =============================================================================
# 故障诊断配置
# =============================================================================
# Windows特定调试
ENABLE_WINDOWS_CRASH_DUMPS=false
CRASH_DUMP_PATH=.\\crash_dumps
ENABLE_PROCESS_MONITOR=false

# 性能计数器
ENABLE_PERFMON_COUNTERS=false

# =============================================================================
# 生产环境建议
# =============================================================================
# 高性能工作站 (32+ cores, 64GB+ RAM, RTX 4090):
# WORKERS=4
# MAX_CONCURRENT_REQUESTS=50
# LLAMACPP_N_THREADS=16
# LLAMACPP_N_GPU_LAYERS=40

# 游戏电脑 (16 cores, 32GB RAM, RTX 3080):
# WORKERS=2
# MAX_CONCURRENT_REQUESTS=20
# LLAMACPP_N_THREADS=8
# LLAMACPP_N_GPU_LAYERS=32

# 办公电脑 (8 cores, 16GB RAM, 集成显卡):
# WORKERS=1
# MAX_CONCURRENT_REQUESTS=5
# LLAMACPP_N_THREADS=4
# LLAMACPP_N_GPU_LAYERS=0

# =============================================================================
# Windows安装注意事项
# =============================================================================
# 1. 安装Visual Studio Build Tools或Visual Studio Community
# 2. 确保安装了最新的NVIDIA驱动程序和CUDA工具包
# 3. 建议使用Anaconda或Miniconda管理Python环境
# 4. 某些杀毒软件可能会误报，需要添加白名单
# 5. Windows Defender实时保护可能影响性能
# 6. 建议使用SSD存储提高I/O性能
# 7. 确保有足够的虚拟内存设置